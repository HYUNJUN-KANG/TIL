boxes = [7, 4, 2, 0, 0, 6, 0, 7, 0]

# 상자로 채워진 방이 있다.
# 방을 오른쪽으로 90도 회전 시켰을 때,
# 낙차가 가장 큰 상자의 낙차를 구하여라

# 각 줄의 가장 높이 있는 상자의 낙차가 각줄에서 가장 크다.
# 상자의 낙차는 어떻게 구할 것인가?
# 낙차를 구하는 방법: 현재 오른쪽에 비어있거나 높이가 자신보다 작은 상자이면
# 낙차를 하나씩 더하면 된다.

# 각 줄의 가장 높이 있는 상자의 낙차가 각줄에서 가장 크다.
# 상자의 낙차는 어떻게 구할까?
# 낙차를 구하는 방법: 원래 모양에서 오른쪽에 있는 상자의 높이가 현재 대상보다 작거나 상자가 쌓여있지 않으면
# 낙차를 증가시킨다.

# 모든 열의 낙차를 구하고, 그 중에서 가장 큰 낙차를 반환하거나 출력

# 하나의 열의 낙차부터 구하기.

# step 1. 가장 왼쪽에 있는 열의 낙차구하기
target = boxes[0]
cnt = 0
for i in range(1, len(boxes)):   # 1번열부터 끝까지 순회
  # target 보다 작은 값을 가지는 열의 수를 계산
    if boxes[i] < target:
        cnt += 1
print(cnt)

# step 2. 모든 열의 낙차를 구하고, 최고 낙차 구하기
# max나 min 값을 저장하는 변수를 선언 할 때는 분명한 이유가 있어야 한다.

max_cnt = 0   # 최솟값이 0이므로 0으로 초기화

for j in range(0, len(boxes)):

    target = boxes[0]
    cnt = 0

    for i in range(j+1, len(boxes)):  # 1번열부터 끝까지 순회
        # target 보다 작은 값을 가지는 열의 수를 계산
        if boxes[i] < target:
            cnt += 1
    if cnt > max_cnt:
        max_cnt = cnt

print(max_cnt)

    # 반복문 돌 때마다, cnt의 값을 비교해서 더 큰 값만 남긴다.